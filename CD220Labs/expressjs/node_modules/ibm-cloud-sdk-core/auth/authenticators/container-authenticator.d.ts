/**
 * Copyright 2021 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ContainerTokenManager } from '../token-managers';
import { IamRequestOptions, IamRequestBasedAuthenticator } from './iam-request-based-authenticator';
/** Configuration options for IAM authentication. */
export interface Options extends IamRequestOptions {
    /** The file containing the compute resource token. */
    crTokenFilename?: string;
    /** The IAM profile name associated with the compute resource token. */
    iamProfileName?: string;
    /** The IAM profile ID associated with the compute resource token. */
    iamProfileId?: string;
}
/**
 * The [[ContainerAuthenticator]] will read a compute resource token from the file system
 * and use this value to obtain a bearer token from the IAM token server.  When the bearer
 * token expires, a new token is obtained from the token server.
 *
 * The bearer token will be sent as an Authorization header in the form:
 *
 *      Authorization: Bearer <bearer-token>
 */
export declare class ContainerAuthenticator extends IamRequestBasedAuthenticator {
    protected tokenManager: ContainerTokenManager;
    private crTokenFilename;
    private iamProfileName;
    private iamProfileId;
    /**
     *
     * Create a new [[ContainerAuthenticator]] instance.
     *
     * @param {object} options Configuration options for IAM authentication.
     * @param {string} [options.crTokenFilename] The file containing the compute resource token.
     * @param {string} [options.iamProfileName] The IAM profile name associated with the compute resource token.
     * @param {string} [options.iamProfileId] The IAM profile ID associated with the compute resource token.
     * @param {boolean} [options.disableSslVerification] A flag that indicates
     *   whether verification of the token server's SSL certificate should be
     *   disabled or not
     * @param {string} [options.url] for HTTP token requests.
     * @param {object<string, string>} options.headers to be sent with every
     * @param {string} [options.clientId] The `clientId` and `clientSecret` fields are used to form a "basic"
     *   authorization header for IAM token requests.
     * @param {string} [options.clientSecret] The `clientId` and `clientSecret` fields are used to form a "basic"
     *   authorization header for IAM token requests.
     * @param {string} [options.scope] The "scope" parameter to use when fetching the bearer token from the
     *   IAM token server.
     * @throws {Error} When the configuration options are not valid.
     */
    constructor(options: Options);
    /**
     * Setter for the filename of the compute resource token.
     * @param {string} A string containing a path to the CR token file
     */
    setCrTokenFilename(crTokenFilename: string): void;
    /**
     * Setter for the "profile_name" parameter to use when fetching the bearer token from the IAM token server.
     * @param {string} A string that makes up the iamProfileName parameter
     */
    setIamProfileName(iamProfileName: string): void;
    /**
     * Setter for the "profile_id" parameter to use when fetching the bearer token from the IAM token server.
     * @param {string} A string that makes up the iamProfileId parameter
     */
    setIamProfileId(iamProfileId: string): void;
    /**
     * Returns the authenticator's type ('container').
     *
     * @returns a string that indicates the authenticator's type
     */
    authenticationType(): string;
}
