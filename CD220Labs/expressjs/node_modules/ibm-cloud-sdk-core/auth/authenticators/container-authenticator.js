"use strict";
/**
 * Copyright 2021 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var authenticator_1 = require("./authenticator");
var token_managers_1 = require("../token-managers");
var iam_request_based_authenticator_1 = require("./iam-request-based-authenticator");
/**
 * The [[ContainerAuthenticator]] will read a compute resource token from the file system
 * and use this value to obtain a bearer token from the IAM token server.  When the bearer
 * token expires, a new token is obtained from the token server.
 *
 * The bearer token will be sent as an Authorization header in the form:
 *
 *      Authorization: Bearer <bearer-token>
 */
var ContainerAuthenticator = /** @class */ (function (_super) {
    __extends(ContainerAuthenticator, _super);
    /**
     *
     * Create a new [[ContainerAuthenticator]] instance.
     *
     * @param {object} options Configuration options for IAM authentication.
     * @param {string} [options.crTokenFilename] The file containing the compute resource token.
     * @param {string} [options.iamProfileName] The IAM profile name associated with the compute resource token.
     * @param {string} [options.iamProfileId] The IAM profile ID associated with the compute resource token.
     * @param {boolean} [options.disableSslVerification] A flag that indicates
     *   whether verification of the token server's SSL certificate should be
     *   disabled or not
     * @param {string} [options.url] for HTTP token requests.
     * @param {object<string, string>} options.headers to be sent with every
     * @param {string} [options.clientId] The `clientId` and `clientSecret` fields are used to form a "basic"
     *   authorization header for IAM token requests.
     * @param {string} [options.clientSecret] The `clientId` and `clientSecret` fields are used to form a "basic"
     *   authorization header for IAM token requests.
     * @param {string} [options.scope] The "scope" parameter to use when fetching the bearer token from the
     *   IAM token server.
     * @throws {Error} When the configuration options are not valid.
     */
    function ContainerAuthenticator(options) {
        var _this = _super.call(this, options) || this;
        // the param names are shared between the authenticator and the token
        // manager so we can just pass along the options object
        // the token manager will also handle the validation of required options
        _this.tokenManager = new token_managers_1.ContainerTokenManager(options);
        _this.crTokenFilename = options.crTokenFilename;
        _this.iamProfileName = options.iamProfileName;
        _this.iamProfileId = options.iamProfileId;
        return _this;
    }
    /**
     * Setter for the filename of the compute resource token.
     * @param {string} A string containing a path to the CR token file
     */
    ContainerAuthenticator.prototype.setCrTokenFilename = function (crTokenFilename) {
        this.crTokenFilename = crTokenFilename;
        // update properties in token manager
        this.tokenManager.setCrTokenFilename(crTokenFilename);
    };
    /**
     * Setter for the "profile_name" parameter to use when fetching the bearer token from the IAM token server.
     * @param {string} A string that makes up the iamProfileName parameter
     */
    ContainerAuthenticator.prototype.setIamProfileName = function (iamProfileName) {
        this.iamProfileName = iamProfileName;
        // update properties in token manager
        this.tokenManager.setIamProfileName(iamProfileName);
    };
    /**
     * Setter for the "profile_id" parameter to use when fetching the bearer token from the IAM token server.
     * @param {string} A string that makes up the iamProfileId parameter
     */
    ContainerAuthenticator.prototype.setIamProfileId = function (iamProfileId) {
        this.iamProfileId = iamProfileId;
        // update properties in token manager
        this.tokenManager.setIamProfileId(iamProfileId);
    };
    /**
     * Returns the authenticator's type ('container').
     *
     * @returns a string that indicates the authenticator's type
     */
    // eslint-disable-next-line class-methods-use-this
    ContainerAuthenticator.prototype.authenticationType = function () {
        return authenticator_1.Authenticator.AUTHTYPE_CONTAINER;
    };
    return ContainerAuthenticator;
}(iam_request_based_authenticator_1.IamRequestBasedAuthenticator));
exports.ContainerAuthenticator = ContainerAuthenticator;
