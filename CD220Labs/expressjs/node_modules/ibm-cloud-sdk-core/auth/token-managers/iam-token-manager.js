"use strict";
/**
 * (C) Copyright IBM Corp. 2019, 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var iam_request_based_token_manager_1 = require("./iam-request-based-token-manager");
/**
 * The IAMTokenManager takes an api key and performs the necessary interactions with
 * the IAM token service to obtain and store a suitable bearer token. Additionally, the IAMTokenManager
 * will retrieve bearer tokens via basic auth using a supplied `clientId` and `clientSecret` pair.
 */
var IamTokenManager = /** @class */ (function (_super) {
    __extends(IamTokenManager, _super);
    /**
     *
     * Create a new [[IamTokenManager]] instance.
     *
     * @param {object} options Configuration options.
     * @param {string} options.apikey The IAM api key.
     * @param {string} [options.clientId] The `clientId` and `clientSecret` fields are used to form a "basic"
     *   authorization header for IAM token requests.
     * @param {string} [options.clientSecret] The `clientId` and `clientSecret` fields are used to form a "basic"
     *   authorization header for IAM token requests.
     * @param {string} [url='https://iam.cloud.ibm.com'] The IAM endpoint for token requests.
     * @param {boolean} [options.disableSslVerification] A flag that indicates
     *   whether verification of the token server's SSL certificate should be
     *   disabled or not.
     * @param {object<string, string>} [options.headers] Headers to be sent with every
     *   outbound HTTP requests to token services.
     * @constructor
     */
    function IamTokenManager(options) {
        var _this = _super.call(this, options) || this;
        _this.requiredOptions = ['apikey'];
        utils_1.validateInput(options, _this.requiredOptions);
        _this.apikey = options.apikey;
        // construct form data for the apikey use case of iam token management
        _this.formData.apikey = _this.apikey;
        _this.formData.grant_type = 'urn:ibm:params:oauth:grant-type:apikey';
        _this.formData.response_type = 'cloud_iam';
        return _this;
    }
    return IamTokenManager;
}(iam_request_based_token_manager_1.IamRequestBasedTokenManager));
exports.IamTokenManager = IamTokenManager;
